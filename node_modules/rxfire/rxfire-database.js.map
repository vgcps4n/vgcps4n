{"version":3,"file":"rxfire-database.js","sources":["database/fromRef.ts","database/interfaces.ts","database/utils.ts","database/object/index.ts","database/list/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { Observable } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { ListenEvent, QueryChange } from './interfaces';\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n */\nexport function fromRef(\n  ref: database.Query,\n  event: ListenEvent\n): Observable<QueryChange> {\n  return new Observable<QueryChange>(subscriber => {\n    const fn = ref.on(\n      event,\n      (snapshot, prevKey) => {\n        subscriber.next({ snapshot, prevKey, event });\n      },\n      subscriber.error.bind(subscriber)\n    );\n    return {\n      unsubscribe() {\n        ref.off(event, fn);\n      }\n    };\n  }).pipe(\n    // Ensures subscribe on observable is async. This handles\n    // a quirk in the SDK where on/once callbacks can happen\n    // synchronously.\n    delay(0)\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\n\nexport enum ListenEvent {\n  added = 'child_added',\n  removed = 'child_removed',\n  changed = 'child_changed',\n  moved = 'child_moved',\n  value = 'value'\n}\n\nexport interface QueryChange {\n  snapshot: database.DataSnapshot;\n  prevKey: string | null | undefined;\n  event: ListenEvent;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenEvent } from './interfaces';\n\n/**\n * Check the length of the provided array. If it is empty return an array\n * that is populated with all the Realtime Database child events.\n * @param events\n */\nexport function validateEventsArray(events?: ListenEvent[]): ListenEvent[] {\n  if (events == null || events.length === 0) {\n    events = [\n      ListenEvent.added,\n      ListenEvent.removed,\n      ListenEvent.changed,\n      ListenEvent.moved\n    ];\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { QueryChange, ListenEvent } from '../interfaces';\nimport { fromRef } from '../fromRef';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Get the snapshot changes of an object\n * @param query\n */\nexport function object(query: database.Query): Observable<QueryChange> {\n  return fromRef(query, ListenEvent.value);\n}\n\n/**\n * Get an array of object values, optionally with a mapped key\n * @param query object ref or query\n * @param keyField map the object key to a specific field\n */\nexport function objectVal<T>(\n  query: database.Query,\n  keyField?: string\n): Observable<T> {\n  return fromRef(query, ListenEvent.value).pipe(\n    map(change => changeToData(change, keyField) as T)\n  );\n}\n\nexport function changeToData(change: QueryChange, keyField?: string): {} {\n  const val = change.snapshot.val();\n\n  // val can be a primitive type\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  return {\n    ...val,\n    ...(keyField ? { [keyField]: change.snapshot.key } : null)\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { QueryChange, ListenEvent } from '../interfaces';\nimport { Observable, of, merge, from } from 'rxjs';\nimport { validateEventsArray } from '../utils';\nimport { fromRef } from '../fromRef';\nimport { switchMap, scan, distinctUntilChanged, map } from 'rxjs/operators';\nimport { changeToData } from '../object';\n\nexport function stateChanges(\n  query: database.Query,\n  events?: ListenEvent[]\n): Observable<QueryChange> {\n  events = validateEventsArray(events);\n  const childEvent$ = events.map(event => fromRef(query, event));\n  return merge(...childEvent$);\n}\n\nfunction fromOnce(query: database.Query): Observable<QueryChange> {\n  return from(query.once(ListenEvent.value)).pipe(\n    map(snapshot => {\n      const event = ListenEvent.value;\n      return { snapshot, prevKey: null, event };\n    })\n  );\n}\n\nexport function list(\n  query: database.Query,\n  events?: ListenEvent[]\n): Observable<QueryChange[]> {\n  const eventsList = validateEventsArray(events);\n  return fromOnce(query).pipe(\n    switchMap(change => {\n      const childEvent$ = [of(change)];\n      for (const event of eventsList) {\n        childEvent$.push(fromRef(query, event));\n      }\n      return merge(...childEvent$).pipe(scan(buildView, []));\n    }),\n    distinctUntilChanged()\n  );\n}\n\n/**\n * Get an object mapped to its value, and optionally its key\n * @param query object ref or query\n * @param keyField map the object key to a specific field\n */\nexport function listVal<T>(\n  query: database.Query,\n  keyField?: string\n): Observable<T[]> {\n  return list(query).pipe(\n    map(arr => arr.map(change => changeToData(change, keyField) as T))\n  );\n}\n\nfunction positionFor(changes: QueryChange[], key: string | null): number {\n  const len = changes.length;\n  for (let i = 0; i < len; i++) {\n    if (changes[i].snapshot.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction positionAfter(changes: QueryChange[], prevKey?: string): number {\n  if (prevKey == null) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current: QueryChange[], change: QueryChange): QueryChange[] {\n  const { snapshot, prevKey, event } = change;\n  const { key } = snapshot;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey || undefined);\n  switch (event) {\n    case ListenEvent.value:\n      if (change.snapshot && change.snapshot.exists()) {\n        let prevKey: string | null = null;\n        change.snapshot.forEach(snapshot => {\n          const action: QueryChange = {\n            snapshot,\n            event: ListenEvent.value,\n            prevKey\n          };\n          prevKey = snapshot.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case ListenEvent.added:\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if (((previous && previous.snapshot.key) || null) !== prevKey) {\n          current = current.filter(x => x.snapshot.key !== snapshot.key);\n          current.splice(afterPreviousKeyPosition, 0, change);\n        }\n      } else if (prevKey == null) {\n        return [change, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, change);\n      }\n      return current;\n    case ListenEvent.removed:\n      return current.filter(x => x.snapshot.key !== snapshot.key);\n    case ListenEvent.changed:\n      return current.map(x => (x.snapshot.key === key ? change : x));\n    case ListenEvent.moved:\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\n"],"names":["fromRef","ref","event","Observable","subscriber","fn","on","snapshot","prevKey","next","error","bind","unsubscribe","off","pipe","delay","ListenEvent","validateEventsArray","events","length","added","removed","changed","moved","changeToData","change","keyField","val","key","list","query","eventsList","from","once","value","map","fromOnce","switchMap","childEvent$","of","eventsList_1","_i","event_1","push","merge","scan","buildView","distinctUntilChanged","positionFor","changes","len","i","current","currentKeyPosition","afterPreviousKeyPosition","positionAfter","undefined","exists","prevKey_1","forEach","action","previous","filter","x","splice","slice","data","arr"],"mappings":"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"}